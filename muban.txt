-----
#####
-----
#####
-----
#####
-----
#####
-----
#####
外部样式的缺点：
-----
加载速度稍慢。
#####
行内样式的优点和缺点：
-----
优点：直观
缺点：没有复用性
#####
align能控制垂直对齐吗？
-----
不能
#####
<a>标签中的target能设哪些值？
-----
_self,_blank,以及frame中的name.
#####
<img>标签中alt和title的区别：
-----
alt:图片加载失败提示
title:放上鼠标的提示
#####
../是什么路径？
-----
上级目录
#####
HTML中字体样式用什么属性设置？
-----
faces
#####
<P></P>的特征？
-----
换行并且空出一行。
#####
非构造方法能不能与类名同名？
-----
能，但有警告和建议和提示
#####
new ArrayList(20)是什么意思？
-----
设置初始容量
#####
final修饰类有什么影响？
-----
此类不能被继承
#####
描述switch穿透的情况
-----
先找到对应值项，以下进行穿透，且i值不再变
#####
可变参数的要求有什么？
-----
可变参数不能放在参数列表前项。
#####
多继承==多重继承？OR 多层继承
-----
多继承==多重继承
#####
简单写出Java特点，写出5个以上，越多越好
-----
简单的、面向对象的、分布式的、安全的、稳定的、与平台无关的、可解释的、多线的、动态的语言。
#####
什么是Java?
-----
JAVA：一种编程语言

      一种开发环境

      一种应用环境

      一种部署环境
#####
请写出Java的版本分类，以及每种版本的应用方向

-----
三种版本：

   JME：是面向内存有限的移动终端. 为消费性产品设计的；

   JSE： 是SUN公司针对桌面开发和低端商务计算方案开发的版本。为笔记本电脑、PC机设计的；

   JEE： 是一种利用JAVA 2平台来简化企业解决方案的开发、部署和管理相关的复杂问题的体系结构。 为企业级的、服务器端的高端应用而设计的；
#####
 描述Java技术的主要特性
-----
java虚拟机

   垃圾回收

   代码安全性
#####
描述 Java虚拟机的功能
-----

（1）通过 ClassLoader 寻找和装载 class 文件

（2）解释字节码成为指令并执行，提供 class 文件的运行环境

（3）进行运行期间垃圾回收

（4）提供与硬件交互的平台

##### 
简述Java代码安全性

-----
（1）编译时的错误检验

（2）类装载检查，把本机上的类和网络资源类相分离，在调入类的时候进行检查，因而可以限制任何“特洛伊木马”的应用

（3）字节码校验

（4）沙箱机制，限定访问权限
##### 
描述Java垃圾回收机制
-----
Java 编程语言解除了程序员释放内存的责任。它可提供一种系统级线程以跟踪每一次内存的分配情况。在 Java 虚拟机的空闲周期，垃圾收集线程检查并释放那些可被释放的内存。垃圾收集在 Java 技术程序的生命周期中自动进行，它解除了释放内存的要求，这样能够有效避免内存漏洞和内存泄露（内存泄露就是程序运行期间，所占用的内存一直往上涨， 很容易造成系统资源耗尽而降低性能或崩溃 。
##### 
垃圾回收有以下特点：
-----
（1）垃圾回收是一个自动的系统行为，程序员不能控制垃圾回收的功能和行为。

（2）有一些跟垃圾回收相关的方法，比如：System.gc( ) ,调用这些方法，仅仅是在通知垃圾回收程序，至于垃圾回收程序运不运行，什么时候运行，都是无法控制的。

（3）程序员可以通过设置对象为 null，来标示某个对象不再被需要了， 这只是表示这个对象可以被回收了，并不是马上被回收。
#####
简述Java代码的运行过程
-----
（1）编写代码

（2）编译

（3）类装载   通过类装载器装载CLASS文件

（4）校验代码   由字节码校验

（5）解释   由解释器将字节码转换成机器码

（6）运行
#####
简述如何搭建Java开发环境
-----
首先下载安装JDK 然后配置环境 

    （1）配置PATH，  操作系统运行环境的路径

（2）配置CLASSPATH  JAVA运行应用程序时所需要的类包的路径

    （3）配置JAVA_HOME   供需要运行JAVA的程序使用
#####
简述classpath，path，JAVA_HOME的意义和配置方法
-----

path          操作系统运行环境的路径

classpath      JAVA运行应用程序时所需要的类包的路径

JAVA_HOME  供需要运行JAVA的程序使用

#####
Java代码的注释有几种？分别举例说明
-----
（1）  //  单行注解

（2）  /*     */ 块注释

（3）  /* *

          *  文档注释

          */
#####
什么是标示符？
-----
标识符：是赋予变量、类、方法的名称。

//标识符是标识变量、类或方法的有效字符序列
#####
标示符定义的规则？
-----
（1） 首字母只能以字母、下划线、$开头,其后可以跟字母‘下划线、$和数字配置CLASSPATH 

（2） 表示符不能是关键字

（3） 标识符区分大小写
#####
什么是关键字？
-----
关键字就是编程语言与机器语言的编码约定
#####
true、false、null、sizeof、goto、const那些是Java关键字
-----
true 、false 、null    为JAVA的关键字
#####
Java的基本数据类型有几种？分别是？
-----
short int long  boolean float double char byte

/*布尔类型（boolean）

字符型（char）

数值类型

定点类型 字节型（byte）

短整型（short）

整型（int）

长整型（long）

浮点类型    单精度（float）

双精度（double）
#####
请写出每种基本类型的默认值？取值范围？分别给出一个定义的例子
-----
默认值            取值范围             示例

   字节型 ：  0                -2^7----2^7-1          byte b=10;

   字符型 ：  ' \u0000'            0----2^16-1    char c=’c’ ;

   short  :    0                 -2^15----2^15-1        short s=10;

   int    :    0                 -2^31----2^31-1        int i=10;

   long   :    0                -2^63----2^63-1          long o=10L;

   float  :     0.0f               -2^31----2^31-1        float f=10.0F

   double :    0.0d              -2^63----2^63-1         double d=10.0;

   boolean:    false              true\false              boolean flag=true;

#####
 在基本类型中，如果不明确指定，整数型的默认是什么类型？带小数的默认是什么类型？
-----
整数类型 默认为  int

带小数的默认为   double

boolean的默认值   false

#####
什么是变量？
-----
变量是用来引用一块内存区域或一个值，用标识符来表示，可以通过操作变量来操作变量所对应的内存区域或值块的值。
#####
 变量的定义规则？
-----
（1） 以字母、$、下划线开头，其后可以跟字母、下划线、$和数字；

（2） 首字母小写，中间单词用大写字母隔开；

（3） 名称具有一定含义；

//4.可以先声明再赋值也可以声明的同时进行赋值

//5.没有赋值的变量是不可以使用的

#####
请写出Java编码约定中对下列部分的要求：类、属性、方法、包、文件名、变量、常量、控制结构、语句行、注释

-----
类：    一个类文件中类名要和文件名相同，类名一定要以大写字母开头，单词之间用大写字母分隔

    属性：  属性名首字母小写，中间用大写字母隔开。

    方法：  方法名首字母小写，中间用大写字母隔开。

    包：    引用包必须写在类文件的开头,有且只能有一个包，全部用小写字母。

    控制结构：当语句是控制结构的一部分时，即使是单个语句，也应使用大括号将语句封闭。

    语句行：每行只写一个语句，并使用四个缩进的空格，使代码更易读，注意用分号结束。

注释：  用注释来说明那些不明显代码的段落。

常量： 常量名一般用大写字母，单词之间用下划线分隔，一旦赋值不允许修改。
#####
什么是Javadoc?
-----
按照一定格式生成程序的文档的工具。
#####
 什么是引用类型？
-----
用户定义类型, 它可引用类和数组。

除去基本数据类型的其他类型都是引用数据类型。
#####
什么是按值传递？什么是按引用传递？
-----
按值传递：就是将该值的副本传过去（基本数据类型+String类型的传递，就是按值传递）

按引用传递：就是将值的内存地址传过去（除基本数据类型+String以外类型的传递，就是引用传递）
#####
 简述new关键字所做的工作
-----
new 创建一个对象，并为对象分配一块内存。
#####
 简述”=” 和”= =”的功能和区别
-----
"=" 赋值,

"= ="当比较基本数据类型的时候，判断前后两个值是否相等；

当比较引用数据类型的时候，判断= =前后两个值的内存地址是否相等；   

区别：

    = ：为赋值表达式

    = = ：为逻辑表达式

#####
什么是实例变量？什么是局部变量？什么是类变量？什么是final变量？
-----
实例变量：  类中定义的变量，即类成员变量，如果没有初始化，会有默认值；

   局部变量：  在方法中定义的变量，必须初始化；

   类变量：    用static修饰的属性；

   final变量：  用final 修饰的变量， 
#####
简述上述各种变量的定义规则和使用规则？
-----
实例变量： 不需要static关键字来声明，需要类的实例（对象）调用（用“.”）；

类变量： 用static修饰，可以用类名调用，也可以用类的实例调用；

   局部变量： 在方法内任意定义变量即为局部变量；

   final变量： 一旦赋值，不可以再修改的变量；

final属性只允许赋值一次，且只能通过构造方法赋值，定义后也就是一个常量；

final修饰的变量，只允许赋值一次
#####
 什么是构造和析构方法？功能是？
-----
构造方法：每个类至少有一个构造方法，类初始化时调用的方法

     1．方法名和类名相同 

     2．无返回值类型

   格式：访问权限 类名(参数列表) {}；

     1．自己定义构造后，就没有默认的构造方法

     2．无构造方法时，默认为空参的构造方法(无参数,方法体为空)

    析构方法：finalize

             类销毁时，自动调用方法

             当对象在内存中被删除时,自动调用该方法

             在此方法中可以写回收对象内部的动态空间的代码
#####
简述Java的访问修饰符类型？分别有什么功能？
-----
public 公开的，任何一个类都有可以访问 

protected 同包同类,只可被它的子类访问

   default 只能被同一个包中类访问   

private 私有的，只能在本类中被访问 

#####
 分别说明：在类上、在属性上、在方法上能使用哪些访问修饰符
-----
在类上：public default  final

   在方法上： 访问权限：public protected private default

              方法修饰符：static 

                          final

              返回类型：void

   在属性上：public protected private default

             static 

             final

 #####
 简述什么是包？包的功能
-----
包：对所定义的多个JAVA类进行分组，将多个功能相关的类定义到一个包(文件)中。

   功能：1.易于查找和使用适当的类

         2.包不止包含类和接口,还可以包含其它包,形成层次的包空间

         3.有助于避免命名冲突
 #####
 请写出5个以上的JDK中的包，以及他们的基本功能
-----
java.awt：  包含构成抽象窗口工具集的多个类，用来构建和管理应用程序的图形用户界面

    java.lang：  提供java编成语言的程序设计的基础类

    java.io：　  包含提供多种输出输入功能的类，

    java.net：　 包含执行与网络有关的类，如URL，SCOKET，SEVERSOCKET，

    java.applet： 包含java小应用程序的类

java.util：　 包含一些实用性的类

#####
什么是包装类？Java中都有哪些包装类
-----
在JDK中针对各种基本类型分别定义相应的引用类型 --------------称为封装类

Boolean  Byte  Short  Integer  Long  Float  Double  Character
#####
 OOP（面向对象）语言的三大特征是？
-----
封装性，继承性，多态性
#####
 分别表述类的三大特性及其他们的功能
-----
封装：隐藏类的实现细节、迫使用户去使用一个接口去访问数据、使代码更好维护

继承：子类可以直接继承使用父类的方法，程序员只需要做的是定义额外特征或规定将适用的变化

多态性：同一个行为具有多个不同表现形式或形态的能力

#####
如何实现继承？继承的规则？
-----
public class A extends B{

   }

（1） 单继承性

（2） 构造方法不能继承

（3） super引用父类，调用父类的属性，方法

（4） 当子类中出现与父类的方法名，返回类型，参数列表相同的方法时要覆盖此方法

#####
 简述this和super的功能和用法
-----
this ：

（1） 能访问除构造方法以外所有的属性、方法，通过this.　来调用方法和属性

（2） 不可以在静态方法中使用，

（3） 在调用其它构造方法时，必须放在该构造方法的第一行

（4） 在构造方法中使用this(参数列表)，相当于调用本类的其它构造方法，它必须作为构造方法的第一句

   super ：访问父类

（1） super. 点取父类中被子类隐藏的方法和属性，

（2） 通过 super(参数列表) 来调用父类的属性和方法，在调用父类的构造方法时必须放在子类构造方法里的第一行；

 
#####
如何确定在多态的调用中，究竟是调用的那个方法？
-----
new的是哪一个类就是调用的哪个类的方法。
#####
方法覆盖的规则？
-----
（1） 方法名要和父类中被覆盖的方法名相同,返回类型相同，参数列表相同。

（2） 访问权限要大于等于被覆盖方法的权限。

（3） 例外列表要小于等于被覆盖方法的例外列表。

#####
 static修饰符的功能是？可以用在什么地方？怎么访问？
-----
static  修饰符功能:

（1） 共用一块内存区域，也就是用static修饰的变量或成员方法对所有类的实例都是相同的

（2） 静态成员方法和静态变量的优点在于他们能在没有创建类的任何一个实例的情况下被引用。

（3） 可以用在方法或属性上

    访问方式：

（1）  直接使用类名调用

（2）  new 一个实例，用实例调用

#####
static的基本规则
-----
（1） 类中的静态方法只可以调用静态的属性和方法，不允许调用非静态的属性和方法。

（2） 静态变量为类变量，可以用类名直接调用静态的属性和方法。

（3） 静态方法中不允许出现this和super

（4） 构造方法不允许声明static

（5） 非静态变量为实例变量，通过实例调用

（6） 静态方法不能被非静态方法覆盖

#####
final修饰符的功能是？可以用在什么地方？
-----
功能：final标记所有通用的功能,不能随意更改

可以用在类、属性和方法上
#####
 final的基本规则
-----
（1） final修饰的类不能被继承

（2） final修饰的成员变量只允许赋值一次，且只能通过构造方法里赋值。

（3） final修饰的局部变量即为常量，只能赋值一次。

（4） final修饰的方法不允许被子类覆盖。

#####
 什么是抽象方法，什么是抽象类
-----
用abstract修饰的方法，只有方法的声明，而没有方法的实现，就叫抽象方法。

用abstract修饰的类，就叫抽象类。

 
#####
 抽象类的规则
-----
（1） 抽象类内部可以没有抽象方法

（2） 必须用abstract修饰

（3） 不能够直接使用抽象类，必须通过子类继承并且实现

（4） 抽象方法不允许被private修饰

#####
 什么情况下使用抽象类
-----
（1） 当一个类的一个或多个方法是抽象方法时；

（2） 当类是一个抽象类的子类，并且不能为任何抽象方法提供任何实现细节或方法体时；

（3） 当一个类实现一个接口，并且不能为任何抽象方法提供实现细节或方法体时；


#####
 equals方法和”= =”的功能和区别
-----
功能：判断对象是否相等

    区别：

     equals方法比较的是对象的值

     = =:比较的是对象值的内存地址，对基本数据类型来说= =比较的是数值
#####
 为什么使用StringBuffer类？有什么功能和优点？
-----
–只创建一个对象

 –StringBuffer 对象的内容是可以被修改的

 –除了字符的长度之外，还有容量的概念

 –通过动态改变容量的大小，加速字符管理

#####
 如何使用Java读写系统属性？
-----
读：

复制代码
Properties props = System.getProperties();

Enumeration prop_names = props.propertyNames();

while (prop_names.hasMoreElements()) {

String prop_name = (String) prop_names.nextElement();

String property = props.getProperty(prop_name);

System.out.println("Property '" + prop_name + "' is '"+ property + "'");

}
复制代码
 

写：

System.setProperties(props);

 
#####
什么是接口？接口的定义规则？
-----
接口是抽象方法和常量值的定义的集合。从本质上讲，接口是一种特殊的抽象类，这种抽象类中只包含常量和方法的定义，而没有变量和方法的实现。

public interface Tt {

     public void outPut( );

     public int tt( );

   }

 
#####
 接口的作用？为什么使用接口？
-----
多重继承

    封装、隔离

    功能,实现的分离

多态

    便于后期维护

    接口是可插入性的保证。

 
#####
 什么是多重接口
-----
就是一个类实现多个接口

#####
 描述接口的基本思想？
-----
封装　隔离

接口及相关机制的最基本作用在于：通过接口可以实现不相关类的相同行为，

而不需考虑这些类之间的层次关系。

根据接口可以了解对象的交互界面，而不需了解对象所属的类。

面向对象程序设计讲究“提高内聚，降低耦合”。

#####
 如何选择接口和抽象类？为什么？
-----
优先选用接口，尽量少用抽象类

在下列情况下选择抽象类：需要定义子类的行为，又要为子类提供共性的功能。


#####
什么是异常，异常的分类？
-----
程序中导致程序中断的一些情况叫做异常，一般程序员可以处理。

异常分为运行时异常和非运行时异常（一般异常）

运行时异常是指因设计或实现方式不当导致的问题。也可以说，是程序员的原因导致的，本来可以避免发生的情况。例如：BufferOverflowException, ClassCastException，IndexOutOfBoundsException，ArithmeticException。出现这些异常的代码不需要try块包围。

非运行时异常是指除运行时异常以外所有的异常，出现这些异常的代码必须用try块包围。例如：FileNotFoundException,EOFException,

#####
简述处理异常的两种方式？
-----
抛出（throws）和catch语句处理
#####
 简述finally块的功能和规则
-----
finally块一般写一些不论是否发生异常都必须执行一次的代码

例如关闭与数据库的连接等

#####
 简述throw和throws的功能和使用方法
-----
throw 指编程人员主动抛出一个异常 

throw new NullPointerExeption( );

throws指程序遇到异常情况自动的被动抛出一个异常

public void test( ) throws Exeption{}

#####
异常的分类？
-----
错误（Error）：    JVM 系统内部错误、资源耗尽等严重情况，程序员不可控制

例外（Exception）：其它因编程错误或偶然的外在因素导致的一般性问题，程序可以控制
##### 
什么是断言？
-----
用来证明和测试程序的假设。
##### 
 如何使用断言？举例说明
-----
一种是assert<<布尔表达式>>；另一种是assert<<布尔表达式>>：<<细节描述>>。

assert  a= =10 : "这里a等于10";

#####
 什么是集合？什么是元素？
-----
可以包含其他对象的简单对象就叫集合

集合框架中所包含的对象就叫做元素
#####
  如何给集合排序？
-----
实现comparable接口

#####
 什么是流？可画图说明
-----
流是要传输的数据在源和目的地之间运行的轨迹。
#####
  什么是Unicode？
-----
是一种字符的编码方式，占16位字节，Java 技术使用 Unicode 来表示字符串和字符。
#####
  什么叫保持？什么是可序列化？如何实现可序列化？
-----
将一个对象存放在某种类型的永久存储器上（比如硬盘，光盘，软盘等），称为保持。

标识一个类可以被持久化，叫序列化，也叫串行化或持久化。表示这个类中的数据可以按流式输出。

实现可序列化的方法：实现java.io.Serializable接口。

#####
如何实现线程的调度？如何暂停一个线程的运行
----
调度用wait和notify，sleep()
#####
简述sleep方法和wait方法的功能和区别
----
sleep是让线程休眠一段时间

wait是让线程挂起
#####
 什么是守候线程
----
隐藏在后台持续运行的线程
#####
 什么是临界资源
----
指多个线程共享的资源
#####
 什么是互斥锁，Java中如何实现
----
用来保证在任一时刻只能有一个线程来访问临界资源的那个标记
#####
 什么是死锁？如何避免？
----
如果程序中有多个线程竞争多个资源，就可能会产生死锁。当一个线程等待由另一个线程持有的锁，而后者正在等待已被第一个线程持有的锁时，就会发生死锁。

要避免死锁，应该确保在获取多个锁时，在所有的线程中都以相同的顺序获取锁。尽量少用临界资源。

#####
简述wait和notify,notifyAll的使用
----
被锁定的对象可以调用wait( )方法，这将导致当前线程被阻塞并放弃该对象的互斥锁，即解除了wait( )方法的当前对象的锁定状态，其他的线程就有机会访问该对象。

notify使等待队列上的一个线程离开阻塞状态

notifyAll使等待队列上的所有线程离开阻塞状态